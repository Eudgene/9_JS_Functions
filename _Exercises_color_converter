Для задания цветов в HTML и CSS используются числа в шестнадцатеричной системе счисления. Чтобы не возникало путаницы в определении системы счисления, перед шестнадцатеричным числом ставят символ решетки #, например, #135278. Обозначение цвета (rrggbb) разбивается на три составляющие, где первые два символа обозначают красную компоненту цвета, два средних — зеленую, а два последних — синюю. Таким образом каждый из трех цветов — красный, зеленый и синий — может принимать значения от 00 до FF в шестнадцатеричной системе исчисления.

solution.js
При работе с цветами часто нужно получить отдельные значения красного, зеленого и синего (RGB) компонентов цвета в десятичной системе исчисления и наоборот. Реализуйте и экспортируйте функции rgbToHex() и hexToRgb(), которые возвращают соответствующие представление цвета.

Примеры:
hexToRgb('#24ab00'); // { r: 36, g: 171, b: 0 }

rgbToHex(36, 171, 0); // '#24ab00'
Подсказки:
Вам может понадобится функция chunk из библиотеки lodash.

import chunk from 'lodash/chunk';
import _ from 'lodash';
// BEGIN (write your solution here)
const hexToRgb = (str) => {
  const newStr = str.slice(1);
  const arr = chunk(newStr, 2);
  const newArr = arr.map((item) => item.join(''));
  const newArr1 = newArr.map((item) => parseInt(item, 16));
  const result = newArr1.reduce((acc, item) => {
    const r = 'r';
    const g = 'g';
    const b = 'b';
    if (!_.has(acc, r)) {
      acc[r] = item;
    } else if (!_.has(acc, g)) {
      acc[g] = item;
    } else if (_.has(acc, g)) {
      acc[b] = item;
    }
    return acc;
  }, {});
  return result;
};

const rgbToHex = (...arr) => {
  const newArr = arr.map((num) => num.toString(16));
  const resh = '#';
  const newArr1 = newArr.map((num) => {
    let n = 0;
    if (num.length === 1) {
      n = 0 + num;
    } else {
      n = num;
    }
    return n;
  });
  return resh.concat(newArr1.join(''));
};

export { hexToRgb, rgbToHex };
