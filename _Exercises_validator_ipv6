validator.js
Реализуйте функцию-предикат isValidIPv6(), которая проверяет IPv6-адреса (адреса шестой версии интернет протокола) на корректность. Функция принимает на вход строку с адресом IPv6 и возвращает true, если адрес корректный, а в противном случае false. Экспортируйте функцию по умолчанию.

Дополнительные условия:

Работа функции не зависит от регистра символов.
Ведущие нули в группах цифр необязательны.
Самая длинная последовательность групп нулей, например, :0:0:0: может быть заменена на два двоеточия ::. Такую замену можно произвести только один раз.
Одна группа нулей :0: не может быть заменена на ::.
Примеры
isValidIPv6('10:d3:2d06:24:400c:5ee0:be:3d'); // true
isValidIPv6('0B0:0F09:7f05:e2F3:0D:0:e0:7000'); // true
isValidIPv6('000::B36:3C:00F0:7:937'); // true
isValidIPv6('::1'); // true

isValidIPv6('2607:G8B0:4010:801::1004'); // false
isValidIPv6('1001:208:67:4f00:e3::2c6:0'); // false
isValidIPv6('2.001::'); // false
isValidIPv6('9f8:0:69S0:9:9:d9a:672:f90d'); // false
Подсказки
IPv6
Для проверки пограничных случаев внимательно изучите список IP-адресов в модуле с тестами.



import _ from 'lodash';

// BEGIN (write your solution here)
const isValidIPv6 = (str) => {
  let result = true;
  if (str.includes(':::')) {
    result = false;
  } else if (!str.includes(':')) {
    result = false;
  } else if (str[0] === ':' && str[1] !== ':') {
    result = false;
  } else if (str[str.length - 1] === ':' && str[str.length - 2] !== ':') {
    result = false;
  } else if (str.split('::').length >= 3) {
    result = false;
  } else {
    const newStr = str.split(':');
    const strFiltered = newStr.filter((item) => item !== '');
    const lengthLastElement = _.times(8 - strFiltered.length, _.constant(0));
    const concatStr = lengthLastElement.concat(strFiltered);
    const newStr1 = concatStr.map((num) => (num.length === 5 ? NaN : num));
    if (newStr.length >= 8 && newStr.includes('')) {
      return false;
    }
    const prov = newStr1.reduce((acc, num) => {
      if (num === 'NaN') {
        acc.push(num);
      }
      acc.push(Number(`0x${num}`));
      return acc;
    }, []);
    if (prov.includes(NaN) || prov.length > 8) {
      result = false;
    }
  }
  return result;
};
export default isValidIPv6;
